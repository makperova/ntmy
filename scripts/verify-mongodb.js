/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install mongoose dotenv
 * 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç: node scripts/verify-mongodb.js
 */

// –ò–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
require('dotenv').config();
const mongoose = require('mongoose');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.MONGODB_URI) {
  console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è MONGODB_URI');
  process.exit(1);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ö–µ–º—ã MongoDB –¥–ª—è Card (—Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)
const CardSchema = new mongoose.Schema({
  user_id: { 
    type: String, 
    required: true,
  },
  name: { 
    type: String, 
    required: [true, 'Name is required'],
  },
  username: {
    type: String,
    required: [true, 'Username is required'],
    unique: true,
  },
  displayName: {
    type: String,
    required: [true, 'Display name is required'],
  },
});

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function verifyMongoDBCards() {
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB...');
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ MongoDB');
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Card
    const Card = mongoose.models.Card || mongoose.model('Card', CardSchema);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫
    const cardCount = await Card.countDocuments();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${cardCount} –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ "carter"
    const carterCard = await Card.findOne({ username: 'carter' });
    if (carterCard) {
      console.log(`‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ "carter" –Ω–∞–π–¥–µ–Ω–∞: ${carterCard.name}`);
    } else {
      console.log('‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ "carter" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —É –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    const invalidCards = await Card.find({
      $or: [
        { name: { $exists: false } },
        { username: { $exists: false } },
        { user_id: { $exists: false } }
      ]
    }).select('_id username name');
    
    if (invalidCards.length > 0) {
      console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${invalidCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏:`);
      invalidCards.forEach(card => {
        console.log(`  - ID: ${card._id}, Username: ${card.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}, Name: ${card.name || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      });
    } else {
      console.log('‚úÖ –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–º–µ—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
    const usernames = await Card.aggregate([
      { $group: { _id: "$username", count: { $sum: 1 } } },
      { $match: { count: { $gt: 1 } } }
    ]);
    
    if (usernames.length > 0) {
      console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${usernames.length} –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö username:`);
      usernames.forEach(item => {
        console.log(`  - Username: ${item._id}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.count}`);
      });
    } else {
      console.log('‚úÖ –í—Å–µ username —É–Ω–∏–∫–∞–ª—å–Ω—ã');
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    const latestCards = await Card.find()
      .sort({ updatedAt: -1 })
      .limit(5)
      .select('name username updatedAt');
      
    console.log('\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏:');
    latestCards.forEach(card => {
      console.log(`  - ${card.name} (${card.username}), –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${card.updatedAt ? new Date(card.updatedAt).toLocaleString() : '–Ω–µ—Ç –¥–∞—Ç—ã'}`);
    });
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ MongoDB: ${error.message}`);
    process.exit(1);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB
    await mongoose.connection.close();
    console.log('\n–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏
verifyMongoDBCards(); 