import React, { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import { supabase } from '../../lib/supabase';
import Link from 'next/link';
import AvatarEditor from 'react-avatar-editor';
import { FiHome, FiBarChart2, FiSettings } from 'react-icons/fi';

const EditCard = () => {
  const router = useRouter();
  const { id } = router.query; // Получаем ID карточки из URL
  // Состояние для отслеживания активной вкладки
  type TabType = 'profile' | 'template' | 'share';
  const [activeTab, setActiveTab] = useState<TabType>('profile');
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [cardLoading, setCardLoading] = useState(true);
  
  interface FormData {
    name: string;
    jobTitle: string;
    company: string;
    bio: string;
    username: string;
    email: string;
    phone: string;
    linkedin: string;
    whatsapp: string;
    telegram: string;
  }
  
  const [formData, setFormData] = useState<FormData>({
    name: '',
    jobTitle: '',
    company: '',
    bio: '',
    username: '',
    email: '',
    phone: '',
    linkedin: '',
    whatsapp: '',
    telegram: '',
  });
  const [selectedTemplate, setSelectedTemplate] = useState('minimal');
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [bioKeywords, setBioKeywords] = useState('');
  const [generatingBio, setGeneratingBio] = useState(false);
  
  // Для обработки изображения
  const [previewImage, setPreviewImage] = useState(null);
  const [showEditor, setShowEditor] = useState(false);
  const [temporaryImage, setTemporaryImage] = useState<File | null>(null);
  const [scale, setScale] = useState(1.2);
  const editorRef = useRef<AvatarEditor>(null);
  const [imageData, setImageData] = useState(null);
  
  // Функция выхода из системы
  const handleLogout = async () => {
    await supabase.auth.signOut();
    router.push('/signin');
  };
  
  // Проверка авторизации и загрузка данных карточки при загрузке страницы
  useEffect(() => {
    const checkUserAndLoadCard = async () => {
      // Проверяем авторизацию
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        router.push('/signin');
        return;
      }
      setUser(session.user);
      setLoading(false);
      
      // Если есть ID карточки, загружаем данные
      if (id) {
        try {
          setCardLoading(true);
          
          // Запрос данных карточки из Supabase
          const { data: cardData, error: cardError } = await supabase
            .from('cards')
            .select('*')
            .eq('id', id)
            .single();
            
          if (cardError) throw cardError;
          
          // Устанавливаем полученные данные в состояние
          setFormData({
            name: cardData.name || '',
            jobTitle: cardData.job_title || '',
            company: cardData.company || '',
            bio: cardData.bio || '',
            username: cardData.username || '',
            email: cardData.email || '',
            phone: cardData.phone || '',
            linkedin: cardData.linkedin_url || '',
            whatsapp: cardData.whatsapp_url || '',
            telegram: cardData.telegram_url || '',
          });
          
          // Устанавливаем шаблон
          setSelectedTemplate(cardData.template || 'minimal');
          
          // Загружаем изображение, если оно есть
          if (cardData.image_url) {
            setPreviewImage(cardData.image_url);
          }
          
          setCardLoading(false);
        } catch (error) {
          console.error('Error loading card data:', error);
          setError('Не удалось загрузить данные карточки');
          setCardLoading(false);
        }
      } else {
        // Если ID не передан, значит мы создаем новую карточку
        setCardLoading(false);
      }
    };
    
    if (router.isReady) {
      checkUserAndLoadCard();
    }
  }, [router.isReady, id, router]);
  
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  const handleTabChange = (tab: TabType) => {
    setActiveTab(tab);
  };
  
  const handleTemplateSelect = (template) => {
    setSelectedTemplate(template);
  };
  
  const handlePreview = () => {
    // Логика для предпросмотра карточки
    console.log('Preview card');
  };
  
  // Обработчик загрузки изображения
  const handleImageChange = (e) => {
    const file = e.target.files?.[0] || null;
    if (file) {
      // Проверяем размер файла (максимум 5MB)
      const fileSizeInMB = file.size / (1024 * 1024);
      if (fileSizeInMB > 5) {
        setError('Размер файла превышает 5MB');
        return;
      }
      
      setTemporaryImage(file);
      setShowEditor(true);
    }
  };
  
  // Сохранение отредактированного изображения
  const handleSaveImage = () => {
    if (editorRef.current && temporaryImage) {
      try {
        // Получаем canvas с отредактированным изображением
        const canvas = editorRef.current.getImage();
        
        // Создаем новый canvas большего размера для лучшего качества
        const finalCanvas = document.createElement('canvas');
        finalCanvas.width = 800;
        finalCanvas.height = 800;
        
        const ctx = finalCanvas.getContext('2d');
        if (ctx) {
          // Отрисовываем изображение на новом canvas с масштабированием
          ctx.drawImage(canvas, 0, 0, finalCanvas.width, finalCanvas.height);
          
          // Преобразуем canvas в Blob
          finalCanvas.toBlob((blob) => {
            if (blob) {
              // Создаем File из Blob для загрузки на сервер
              const file = new File([blob], 'card-image.png', { type: 'image/png' });
              
              // Создаем превью URL
              const objectUrl = URL.createObjectURL(blob);
              setPreviewImage(objectUrl);
              
              // Сохраняем файл для дальнейшей загрузки
              setImageData(file);
              
              // Закрываем редактор
              setShowEditor(false);
              setTemporaryImage(null);
            }
          }, 'image/png', 0.9); // PNG с высоким качеством
        }
      } catch (error) {
        console.error('Ошибка при обработке изображения:', error);
        setError('Не удалось обработать изображение');
        setShowEditor(false);
        setTemporaryImage(null);
      }
    }
  };
  
  // Отмена редактирования изображения
  const handleCancelEdit = () => {
    setShowEditor(false);
    setTemporaryImage(null);
  };
  
  const handleSubmit = async () => {
    try {
      setSaving(true);
      setError('');
      setSuccess('');
      
      if (!user) {
        setError('Пользователь не авторизован');
        setSaving(false);
        return;
      }
      
      // Проверяем обязательные поля
      if (!formData.name.trim()) {
        setError('Имя обязательно для заполнения');
        setSaving(false);
        return;
      }
      
      // Проверяем username
      if (!formData.username || formData.username.trim() === '') {
        setError('Link (username) обязателен для заполнения');
        setSaving(false);
        return;
      }
      
      // Если указан username, проверяем, что он содержит только допустимые символы
      if (!/^[a-z0-9_-]+$/.test(formData.username)) {
        setError('Username может содержать только латинские буквы в нижнем регистре, цифры, дефисы и подчеркивания');
        setSaving(false);
        return;
      }
      
      // Переменная для хранения URL изображения или base64 данных
      let imageBase64 = null;
      
      // Если выбрано новое изображение, конвертируем его в base64
      if (imageData) {
        console.log('Обработка выбранного изображения...');
        try {
          // Конвертируем изображение в base64
          const reader = new FileReader();
          imageBase64 = await new Promise((resolve, reject) => {
            reader.onload = () => resolve(reader.result as string);
            reader.onerror = reject;
            reader.readAsDataURL(imageData);
          });
          
          console.log('Изображение успешно конвертировано в base64');
        } catch (error) {
          console.error('Ошибка при обработке изображения:', error);
          setError(`Ошибка при обработке изображения: ${error.message}`);
          setSaving(false);
          return;
        }
      }
      
      // Определяем типы для данных карточки
      type CardData = {
        name: string;
        job_title: string;
        company: string;
        bio: string;
        username: string;
        email: string;
        phone: string;
        linkedin_url: string;
        whatsapp_url: string;
        telegram_url: string;
        template: string;
        updated_at: Date;
        image_url?: string; // Используем существующую колонку image_url
        user_id?: string;
        created_at?: Date;
      };
      
      // Создаем объект с данными для сохранения
      const cardData: CardData = {
        name: formData.name,
        job_title: formData.jobTitle || '',
        company: formData.company || '',
        bio: formData.bio || '',
        username: formData.username || `card-${Date.now().toString(36)}`,  // Генерируем уникальный username, если не указан
        email: formData.email || '',
        phone: formData.phone || '',
        linkedin_url: formData.linkedin || '',
        whatsapp_url: formData.whatsapp || '',
        telegram_url: formData.telegram || '',
        template: selectedTemplate,
        updated_at: new Date()
      };
      
      // Добавляем base64 изображения, если оно было загружено, в поле image_url
      if (imageBase64) {
        cardData.image_url = imageBase64;
      }
      
      console.log('Данные карточки перед сохранением:', { ...cardData, image_url: imageBase64 ? 'base64_data_present' : null });
      
      let result;
      try {
        if (id) {
          // Обновляем существующую карточку
          console.log('Обновляем существующую карточку');
          result = await supabase
            .from('cards')
            .update(cardData)
            .eq('id', id);
        } else {
          // Создаем новую карточку
          console.log('Создаем новую карточку');
          cardData.user_id = user.id;
          cardData.created_at = new Date();
          
          result = await supabase
            .from('cards')
            .insert([cardData])  // Обернуть в массив для правильного формата запроса
            .select();
        }
      } catch (error: any) {
        console.error('Ошибка при работе с базой данных:', error);
        throw new Error(`Ошибка при работе с базой данных: ${error.message}`);
      }
      
      console.log('Результат сохранения:', result);
      if (result.error) {
        console.error('Ошибка при сохранении:', result.error);
        throw result.error;
      }
      
      setSuccess('Карточка успешно обновлена!');
      setSaving(false);
      
      // Перенаправляем на страницу дашборда через 1.5 секунды
      setTimeout(() => {
        router.push('/admin/dashboard');
      }, 1500);
    } catch (error: any) {
      console.error('Error saving card:', error);
      setError(`Ошибка при сохранении карточки: ${error.message || 'Неизвестная ошибка'}`);
      setSaving(false);
    }
  };
  
  // Функция для удаления карточки
  const handleDelete = async () => {
    try {
      if (!id) {
        setError('ID карточки не указан');
        return;
      }
      
      setSaving(true);
      setError('');
      setSuccess('');
      
      // Удаляем карточку из базы данных
      const { error } = await supabase
        .from('cards')
        .delete()
        .eq('id', id);
      
      if (error) {
        throw error;
      }
      
      setSuccess('Карточка успешно удалена');
      setSaving(false);
      
      // Перенаправляем на Dashboard после короткой задержки
      setTimeout(() => {
        router.push('/admin/dashboard');
      }, 1500);
      
    } catch (error: any) {
      console.error('Ошибка при удалении карточки:', error);
      setError(`Ошибка при удалении карточки: ${error.message}`);
      setSaving(false);
    }
  };

  // Отмена удаления
  const cancelDelete = () => {
    setShowDeleteConfirm(false);
  };
  
  // Функция для генерации описания с использованием AI
  const generateBioDescription = async () => {
    if (!bioKeywords || bioKeywords.trim() === '') {
      setError('Пожалуйста, введите ключевые слова для генерации описания');
      return;
    }
    
    try {
      setGeneratingBio(true);
      
      // Здесь будет запрос к API для генерации описания
      // В данном примере используем заглушку с задержкой
      
      // Имитация запроса к API
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Генерируем описание на основе ключевых слов
      const keywords = bioKeywords.split(',').map(kw => kw.trim());
      
      // Простая логика генерации описания для демонстрации
      let generatedBio = `Опытный профессионал в области ${keywords[0]}`;
      
      if (keywords.length > 1) {
        generatedBio += `, специализирующийся на ${keywords.slice(1, -1).join(', ')}`;
        if (keywords.length > 2) {
          generatedBio += ` и ${keywords[keywords.length - 1]}`;
        }
      }
      
      generatedBio += `. Имею большой опыт работы в ${keywords[Math.floor(Math.random() * keywords.length)]}. Стремлюсь к достижению высоких результатов и постоянному профессиональному росту.`;
      
      // Обновляем поле bio с сгенерированным описанием
      setFormData({ ...formData, bio: generatedBio });
      setGeneratingBio(false);
      
    } catch (error) {
      console.error('Ошибка при генерации описания:', error);
      setError('Не удалось сгенерировать описание. Попробуйте еще раз.');
      setGeneratingBio(false);
    }
  };
  
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-gray-50 flex">
      <Head>
        <title>{id ? 'Редактирование' : 'Создание'} карточки | NTMY</title>
        <meta name="description" content="Редактирование цифровой визитки NTMY" />
      </Head>

      {/* Боковая панель */}
      <div className="w-16 bg-white shadow-sm min-h-screen fixed left-0 top-0 bottom-0">
        <div className="flex flex-col items-center py-8 h-full">
          <div className="mb-12">
            <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white font-medium">
              ntmy
            </div>
          </div>
          
          <div className="flex-1 flex flex-col items-center space-y-6">
            <Link href="/admin/dashboard" className="p-2 text-gray-400 hover:text-blue-500">
              <FiHome className="h-6 w-6" />
            </Link>
            
            <Link href="/admin/analytics" className="p-2 text-gray-400 hover:text-blue-500">
              <FiBarChart2 className="h-6 w-6" />
            </Link>
            
            <Link href="/admin/settings" className="p-2 text-gray-400 hover:text-blue-500">
              <FiSettings className="h-6 w-6" />
            </Link>
          </div>
          
          <div className="mt-6 mb-8">
            <button 
              onClick={handleLogout}
              className="p-2 text-gray-400 hover:text-red-500 transition-colors"
              title="Выйти"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
            </button>
          </div>
        </div>
      </div>

      {/* Основной контент */}
      <div className="ml-16 w-full">
        <div className="max-w-3xl mx-auto py-10 px-6">
          <div className="mb-6">
            <h1 className="text-2xl font-medium text-gray-800">{id ? 'Редактирование карточки' : 'Создание новой карточки'}</h1>
            <p className="text-gray-500 mt-1">Настройте свою цифровую визитку, добавьте фото и контактную информацию.</p>
          </div>

          {loading || cardLoading ? (
            <div className="flex justify-center items-center bg-white rounded-xl shadow-sm border border-gray-200 p-10">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
            </div>
          ) : (
            <div className="bg-white rounded-xl shadow-sm mb-8 p-6 border border-gray-200">
              <div className="sticky top-0 bg-white z-10">
                <div className="border-b border-gray-200">
                  <div className="flex items-center justify-between">
                    <div className="flex">
                      <button
                        className={`py-3 px-4 text-sm font-medium ${activeTab === 'profile' ? 'text-blue-500 bg-blue-50 rounded-t-lg' : 'text-gray-500 hover:text-gray-700'}`}
                        onClick={() => handleTabChange('profile')}
                      >
                        Профиль
                      </button>
                      <button
                        className={`py-3 px-4 text-sm font-medium ${activeTab === 'template' ? 'text-blue-500 bg-blue-50 rounded-t-lg' : 'text-gray-500 hover:text-gray-700'}`}
                        onClick={() => handleTabChange('template')}
                      >
                        Шаблон
                      </button>
                      <button
                        className={`py-3 px-4 text-sm font-medium ${activeTab === 'share' ? 'text-blue-500 bg-blue-50 rounded-t-lg' : 'text-gray-500 hover:text-gray-700'}`}
                        onClick={() => handleTabChange('share')}
                      >
                        Публикация
                      </button>
                    </div>
                    <div className="flex items-center space-x-3 py-2">
                      {id && (
                        <button 
                          type="button"
                          onClick={() => setShowDeleteConfirm(true)}
                          className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 text-sm"
                          disabled={saving}
                        >
                          Удалить
                        </button>
                      )}
                      
                      <button
                        type="button"
                        onClick={() => router.push('/admin/dashboard')}
                        className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 text-sm"
                      >
                        Отмена
                      </button>
                      
                      <button
                        type="button"
                        onClick={handleSubmit}
                        className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 text-sm"
                        disabled={saving}
                      >
                        {saving ? 'Сохранение...' : 'Сохранить'}
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              <div className="mt-6">
                {activeTab === 'profile' && (
                  <div className="space-y-6">
                    {/* Profile Form */}
                    <div>
                      <h3 className="text-lg font-medium mb-4">Основная информация</h3>
                      
                      {/* User Photo */}
                      <div className="mb-6">
                        <label className="mb-2 block text-sm font-medium text-gray-700">Фото профиля</label>
                        <div className="flex items-center">
                          <div className="relative mr-6">
                            <div className="w-24 h-24 rounded-full border border-gray-200 overflow-hidden bg-gray-50 flex items-center justify-center">
                              {previewImage ? (
                                <img src={previewImage} alt="Preview" className="w-full h-full object-cover" />
                              ) : (
                                <div className="text-gray-400 text-4xl">
                                  {formData.name ? formData.name.charAt(0).toUpperCase() : '?'}
                                </div>
                              )}
                            </div>
                          </div>
                          <div className="flex flex-col justify-center">
                            <label className="cursor-pointer inline-flex px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                              Загрузить фото
                              <input 
                                type="file" 
                                className="hidden" 
                                accept="image/*" 
                                onChange={handleImageChange}
                              />
                            </label>
                            <p className="mt-2 text-xs text-gray-500">JPG, PNG или GIF, до 5MB</p>
                          </div>
                        </div>
                      </div>
                      
                      {/* Основные поля формы */}
                      <div className="space-y-4 mb-6">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Имя *
                          </label>
                          <input
                            type="text"
                            name="name"
                            value={formData.name}
                            onChange={handleInputChange}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            placeholder="Введите ваше имя"
                            required
                          />
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Link (username) *
                          </label>
                          <div className="relative">
                            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                              <span className="text-gray-500">ntmy.com/</span>
                            </div>
                            <input
                              type="text"
                              name="username"
                              value={formData.username}
                              onChange={(e) => setFormData({ ...formData, username: e.target.value.toLowerCase().replace(/[^a-z0-9_-]/g, '') })}
                              className="w-full pl-[85px] px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                              placeholder="your-username"
                              required
                            />
                          </div>
                          <p className="text-xs text-gray-500 mt-1">Только латинские буквы в нижнем регистре, цифры, дефисы и подчеркивания</p>
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Должность
                          </label>
                          <input
                            type="text"
                            name="jobTitle"
                            value={formData.jobTitle}
                            onChange={handleInputChange}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            placeholder="Например: Frontend Developer"
                          />
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Компания
                          </label>
                          <input
                            type="text"
                            name="company"
                            value={formData.company}
                            onChange={handleInputChange}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            placeholder="Например: NTMY"
                          />
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            О себе
                          </label>
                          <div className="relative">
                            <textarea
                              name="bio"
                              value={formData.bio}
                              onChange={handleInputChange}
                              placeholder="Опишите ваш опыт и специализацию..."
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                              rows={4}
                            />
                            <button
                              type="button"
                              onClick={() => {
                                const keywords = window.prompt('Введите ключевые слова через запятую (например: маркетинг, SMM, дизайн)');
                                if (keywords && keywords.trim()) {
                                  setBioKeywords(keywords);
                                  generateBioDescription();
                                }
                              }}
                              className="absolute right-2 bottom-2 px-2 py-1 bg-blue-100 text-blue-700 rounded text-xs font-medium hover:bg-blue-200 transition-colors flex items-center"
                              title="Сгенерировать описание с помощью AI"
                            >
                              <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                              </svg>
                              {generatingBio ? 'Генерация...' : 'AI Помощник'}
                            </button>
                          </div>
                          <p className="text-xs text-gray-500 mt-1">Краткое описание, которое будет отображаться на вашей карточке</p>
                        </div>
                      </div>
                      
                      {/* Контактная информация */}
                      <div className="mt-8 mb-6">
                        <h3 className="text-lg font-medium mb-4">Контактная информация</h3>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                            <input
                              type="email"
                              name="email"
                              value={formData.email}
                              onChange={handleInputChange}
                              placeholder="your@email.com"
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                          </div>
                          
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Телефон</label>
                            <input
                              type="tel"
                              name="phone"
                              value={formData.phone}
                              onChange={handleInputChange}
                              placeholder="+7 (123) 456-7890"
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                          </div>
                        </div>
                      </div>
                      
                      {/* Социальные сети */}
                      <div className="mt-8">
                        <h3 className="text-lg font-medium mb-4">Социальные сети</h3>
                        
                        <div className="space-y-4">
                          <div className="flex items-center">
                            <div className="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center mr-3">
                              <span className="text-blue-800 font-bold">in</span>
                            </div>
                            <div className="flex-1">
                              <label className="block text-sm font-medium text-gray-700 mb-1">LinkedIn</label>
                              <input
                                type="text"
                                name="linkedin"
                                value={formData.linkedin}
                                onChange={handleInputChange}
                                placeholder="https://linkedin.com/in/username"
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                              />
                            </div>
                          </div>
                          
                          <div className="flex items-center">
                            <div className="w-10 h-10 rounded-full bg-green-100 flex items-center justify-center mr-3">
                              <span className="text-green-800 font-bold">W</span>
                            </div>
                            <div className="flex-1">
                              <label className="block text-sm font-medium text-gray-700 mb-1">WhatsApp</label>
                              <input
                                type="text"
                                name="whatsapp"
                                value={formData.whatsapp}
                                onChange={handleInputChange}
                                placeholder="https://wa.me/79123456789"
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                              />
                            </div>
                          </div>
                          
                          <div className="flex items-center">
                            <div className="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center mr-3">
                              <span className="text-blue-800 font-bold">T</span>
                            </div>
                            <div className="flex-1">
                              <label className="block text-sm font-medium text-gray-700 mb-1">Telegram</label>
                              <input
                                type="text"
                                name="telegram"
                                value={formData.telegram}
                                onChange={handleInputChange}
                                placeholder="https://t.me/username"
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                              />
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                
                {activeTab === 'template' && (
                  <div className="mt-8">
                    <h2 className="text-xl font-bold mb-6">Шаблон / Template</h2>
                    
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                      {/* Template Selection */}
                      <div className="space-y-4">
                        <div 
                          className={`border rounded-lg p-4 cursor-pointer transition-all ${selectedTemplate === 'minimal' ? 'border-blue-500 shadow-md' : 'border-gray-200 hover:border-gray-300'}`}
                          onClick={() => handleTemplateSelect('minimal')}
                        >
                          <div className="h-24 bg-gray-100 rounded flex items-center justify-center mb-2">
                            <span className="text-gray-500 font-medium">Minimal</span>
                          </div>
                          <p className="text-center font-medium">Минимальный</p>
                        </div>
                        
                        <div 
                          className={`border rounded-lg p-4 cursor-pointer transition-all ${selectedTemplate === 'gradient' ? 'border-blue-500 shadow-md' : 'border-gray-200 hover:border-gray-300'}`}
                          onClick={() => handleTemplateSelect('gradient')}
                        >
                          <div className="h-24 bg-gradient-to-r from-blue-400 to-purple-500 rounded flex items-center justify-center mb-2">
                            <span className="text-white font-medium">Gradient</span>
                          </div>
                          <p className="text-center font-medium">Градиент</p>
                        </div>
                        
                        <div 
                          className={`border rounded-lg p-4 cursor-pointer transition-all ${selectedTemplate === 'dark' ? 'border-blue-500 shadow-md' : 'border-gray-200 hover:border-gray-300'}`}
                          onClick={() => handleTemplateSelect('dark')}
                        >
                          <div className="h-24 bg-gray-900 rounded flex items-center justify-center mb-2">
                            <span className="text-gray-200 font-medium">Dark</span>
                          </div>
                          <p className="text-center font-medium">Тёмный</p>
                        </div>
                      </div>

                      {/* Mobile Preview */}
                      <div className="lg:col-span-2">
                        <div className="mx-auto w-[320px]">
                          <div className="rounded-[40px] bg-gray-900 p-3 shadow-xl">
                            {/* Phone Frame */}
                            <div className="relative rounded-[32px] overflow-hidden bg-white">
                              {/* Status Bar */}
                              <div className="h-12 bg-gray-900 flex items-center justify-between px-6">
                                <div className="text-white text-sm">9:41</div>
                                <div className="flex items-center space-x-2">
                                  <div className="w-4 h-4">
                                    <svg viewBox="0 0 24 24" className="text-white">
                                      <path fill="currentColor" d="M12 21.5c5.523 0 10-4.477 10-10s-4.477-10-10-10-10 4.477-10 10 4.477 10 10 10z"/>
                                    </svg>
                                  </div>
                                  <div className="w-4 h-4">
                                    <svg viewBox="0 0 24 24" className="text-white">
                                      <path fill="currentColor" d="M2 22h20V2H2v20zm2-2V4h16v16H4z"/>
                                    </svg>
                                  </div>
                                  <div className="text-white">100%</div>
                                </div>
                              </div>

                              {/* Card Preview Content */}
                              <div className="h-[600px] overflow-y-auto">
                                {selectedTemplate === 'minimal' && (
                                  <div className="bg-white min-h-full">
                                    <div className="p-6 space-y-6">
                                      {/* Profile Image */}
                                      <div className="flex justify-center">
                                        <div className="w-24 h-24 rounded-full overflow-hidden bg-gray-100">
                                          {previewImage ? (
                                            <img src={previewImage} alt="Preview" className="w-full h-full object-cover" />
                                          ) : (
                                            <div className="w-full h-full flex items-center justify-center text-gray-400 text-4xl">
                                              {formData.name ? formData.name.charAt(0).toUpperCase() : '?'}
                                            </div>
                                          )}
                                        </div>
                                      </div>
                                      
                                      {/* Profile Info */}
                                      <div className="text-center space-y-2">
                                        <h1 className="text-2xl font-bold text-gray-900">{formData.name || 'Your Name'}</h1>
                                        {formData.jobTitle && <p className="text-gray-600">{formData.jobTitle}</p>}
                                        {formData.company && <p className="text-gray-600">{formData.company}</p>}
                                      </div>

                                      {/* Bio */}
                                      {formData.bio && (
                                        <p className="text-gray-600 text-center">{formData.bio}</p>
                                      )}

                                      {/* Contact Links */}
                                      <div className="space-y-3">
                                        {formData.email && (
                                          <a href={`mailto:${formData.email}`} className="flex items-center p-3 bg-gray-50 rounded-lg">
                                            <span className="text-gray-600">Email</span>
                                            <span className="ml-auto text-gray-900">{formData.email}</span>
                                          </a>
                                        )}
                                        {formData.phone && (
                                          <a href={`tel:${formData.phone}`} className="flex items-center p-3 bg-gray-50 rounded-lg">
                                            <span className="text-gray-600">Phone</span>
                                            <span className="ml-auto text-gray-900">{formData.phone}</span>
                                          </a>
                                        )}
                                      </div>

                                      {/* Social Links */}
                                      <div className="flex justify-center space-x-4">
                                        {formData.linkedin && (
                                          <a href={formData.linkedin} target="_blank" rel="noopener noreferrer" className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                                            <span className="text-blue-800 font-bold">in</span>
                                          </a>
                                        )}
                                        {formData.telegram && (
                                          <a href={formData.telegram} target="_blank" rel="noopener noreferrer" className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                                            <span className="text-blue-800 font-bold">T</span>
                                          </a>
                                        )}
                                        {formData.whatsapp && (
                                          <a href={formData.whatsapp} target="_blank" rel="noopener noreferrer" className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                                            <span className="text-green-800 font-bold">W</span>
                                          </a>
                                        )}
                                      </div>
                                    </div>
                                  </div>
                                )}

                                {selectedTemplate === 'gradient' && (
                                  <div className="min-h-full bg-gradient-to-b from-blue-500 to-purple-600 text-white">
                                    <div className="p-6 space-y-6">
                                      {/* Profile Image */}
                                      <div className="flex justify-center">
                                        <div className="w-24 h-24 rounded-full overflow-hidden bg-white/20 ring-4 ring-white/30">
                                          {previewImage ? (
                                            <img src={previewImage} alt="Preview" className="w-full h-full object-cover" />
                                          ) : (
                                            <div className="w-full h-full flex items-center justify-center text-white text-4xl">
                                              {formData.name ? formData.name.charAt(0).toUpperCase() : '?'}
                                            </div>
                                          )}
                                        </div>
                                      </div>
                                      
                                      {/* Profile Info */}
                                      <div className="text-center space-y-2">
                                        <h1 className="text-2xl font-bold">{formData.name || 'Your Name'}</h1>
                                        {formData.jobTitle && <p className="text-white/80">{formData.jobTitle}</p>}
                                        {formData.company && <p className="text-white/80">{formData.company}</p>}
                                      </div>

                                      {/* Bio */}
                                      {formData.bio && (
                                        <p className="text-white/80 text-center">{formData.bio}</p>
                                      )}

                                      {/* Contact Links */}
                                      <div className="space-y-3">
                                        {formData.email && (
                                          <a href={`mailto:${formData.email}`} className="flex items-center p-3 bg-white/10 rounded-lg backdrop-blur-sm">
                                            <span className="text-white/80">Email</span>
                                            <span className="ml-auto">{formData.email}</span>
                                          </a>
                                        )}
                                        {formData.phone && (
                                          <a href={`tel:${formData.phone}`} className="flex items-center p-3 bg-white/10 rounded-lg backdrop-blur-sm">
                                            <span className="text-white/80">Phone</span>
                                            <span className="ml-auto">{formData.phone}</span>
                                          </a>
                                        )}
                                      </div>

                                      {/* Social Links */}
                                      <div className="flex justify-center space-x-4">
                                        {formData.linkedin && (
                                          <a href={formData.linkedin} target="_blank" rel="noopener noreferrer" className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm">
                                            <span className="text-white font-bold">in</span>
                                          </a>
                                        )}
                                        {formData.telegram && (
                                          <a href={formData.telegram} target="_blank" rel="noopener noreferrer" className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm">
                                            <span className="text-white font-bold">T</span>
                                          </a>
                                        )}
                                        {formData.whatsapp && (
                                          <a href={formData.whatsapp} target="_blank" rel="noopener noreferrer" className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm">
                                            <span className="text-white font-bold">W</span>
                                          </a>
                                        )}
                                      </div>
                                    </div>
                                  </div>
                                )}

                                {selectedTemplate === 'dark' && (
                                  <div className="min-h-full bg-gray-900 text-white">
                                    <div className="p-6 space-y-6">
                                      {/* Profile Image */}
                                      <div className="flex justify-center">
                                        <div className="w-24 h-24 rounded-full overflow-hidden bg-gray-800 ring-2 ring-blue-500">
                                          {previewImage ? (
                                            <img src={previewImage} alt="Preview" className="w-full h-full object-cover" />
                                          ) : (
                                            <div className="w-full h-full flex items-center justify-center text-gray-400 text-4xl">
                                              {formData.name ? formData.name.charAt(0).toUpperCase() : '?'}
                                            </div>
                                          )}
                                        </div>
                                      </div>
                                      
                                      {/* Profile Info */}
                                      <div className="text-center space-y-2">
                                        <h1 className="text-2xl font-bold text-white">{formData.name || 'Your Name'}</h1>
                                        {formData.jobTitle && <p className="text-gray-400">{formData.jobTitle}</p>}
                                        {formData.company && <p className="text-gray-400">{formData.company}</p>}
                                      </div>

                                      {/* Bio */}
                                      {formData.bio && (
                                        <p className="text-gray-400 text-center">{formData.bio}</p>
                                      )}

                                      {/* Contact Links */}
                                      <div className="space-y-3">
                                        {formData.email && (
                                          <a href={`mailto:${formData.email}`} className="flex items-center p-3 bg-gray-800 rounded-lg border border-gray-700">
                                            <span className="text-gray-400">Email</span>
                                            <span className="ml-auto text-white">{formData.email}</span>
                                          </a>
                                        )}
                                        {formData.phone && (
                                          <a href={`tel:${formData.phone}`} className="flex items-center p-3 bg-gray-800 rounded-lg border border-gray-700">
                                            <span className="text-gray-400">Phone</span>
                                            <span className="ml-auto text-white">{formData.phone}</span>
                                          </a>
                                        )}
                                      </div>

                                      {/* Social Links */}
                                      <div className="flex justify-center space-x-4">
                                        {formData.linkedin && (
                                          <a href={formData.linkedin} target="_blank" rel="noopener noreferrer" className="w-10 h-10 bg-gray-800 rounded-full flex items-center justify-center border border-gray-700">
                                            <span className="text-blue-400 font-bold">in</span>
                                          </a>
                                        )}
                                        {formData.telegram && (
                                          <a href={formData.telegram} target="_blank" rel="noopener noreferrer" className="w-10 h-10 bg-gray-800 rounded-full flex items-center justify-center border border-gray-700">
                                            <span className="text-blue-400 font-bold">T</span>
                                          </a>
                                        )}
                                        {formData.whatsapp && (
                                          <a href={formData.whatsapp} target="_blank" rel="noopener noreferrer" className="w-10 h-10 bg-gray-800 rounded-full flex items-center justify-center border border-gray-700">
                                            <span className="text-green-400 font-bold">W</span>
                                          </a>
                                        )}
                                      </div>
                                    </div>
                                  </div>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                
                {activeTab === 'share' && (
                  <div className="mt-8">
                    <h2 className="text-xl font-bold mb-6">Share Your Card</h2>
                    
                    <div className="bg-white border border-gray-200 rounded-lg p-6 mb-6">
                      <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center">
                          <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mr-4">
                            <span className="text-blue-800 font-bold">URL</span>
                          </div>
                          <div>
                            <h3 className="font-medium">Ссылка на карточку</h3>
                            <p className="text-sm text-gray-500">Поделитесь ссылкой на вашу карточку</p>
                          </div>
                        </div>
                        <button 
                          onClick={() => {
                            navigator.clipboard.writeText(`https://ntmy.com/${formData.username}`)
                              .then(() => alert('Link copied to clipboard!'))
                              .catch(err => console.error('Error copying link:', err));
                          }}
                          className="px-4 py-2 bg-gray-100 rounded-md text-gray-700 hover:bg-gray-200"
                        >
                          Copy
                        </button>
                      </div>
                      <div className="bg-gray-50 p-3 rounded-md text-gray-700 font-mono text-sm break-all">
                        https://ntmy.com/{formData.username}
                      </div>
                    </div>
                    
                    <div className="bg-white border border-gray-200 rounded-lg p-6">
                      <div className="flex items-center mb-4">
                        <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mr-4">
                          <span className="text-blue-800 font-bold">QR</span>
                        </div>
                        <div>
                          <h3 className="font-medium">QR-код</h3>
                          <p className="text-sm text-gray-500">Скачайте QR-код для вашей карточки</p>
                        </div>
                      </div>
                      
                      <div className="flex justify-center mb-4">
                        <div className="w-48 h-48 bg-gray-100 border border-gray-200 rounded-md flex items-center justify-center">
                          <svg viewBox="0 0 100 100" width="100" height="100" className="text-gray-400">
                            <rect x="20" y="20" width="60" height="60" fill="currentColor" />
                          </svg>
                        </div>
                      </div>
                      
                      <div className="flex justify-center">
                        <button className="px-4 py-2 bg-blue-500 text-white rounded-md shadow-sm mr-3">
                          Download PNG
                        </button>
                        <button className="px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-md shadow-sm">
                          Download SVG
                        </button>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
          
          {/* Модальное окно для редактирования изображения */}
          {showEditor && temporaryImage && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
              <div className="bg-white rounded-xl p-6 max-w-md w-full">
                <h3 className="text-lg font-bold mb-4">Редактирование изображения</h3>
                
                <div className="flex justify-center mb-6">
                  <AvatarEditor
                    ref={editorRef}
                    image={temporaryImage}
                    width={280}
                    height={280}
                    border={50}
                    borderRadius={140}
                    color={[255, 255, 255, 0.6]}
                    scale={scale}
                    rotate={0}
                  />
                </div>
                
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Масштаб
                  </label>
                  <input
                    type="range"
                    min="1"
                    max="3"
                    step="0.01"
                    value={scale}
                    onChange={(e) => setScale(parseFloat(e.target.value))}
                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                  />
                </div>
                
                <div className="flex justify-end space-x-2">
                  <button
                    onClick={handleCancelEdit}
                    className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                  >
                    Отмена
                  </button>
                  <button
                    onClick={handleSaveImage}
                    className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-600"
                  >
                    Сохранить
                  </button>
                </div>
              </div>
            </div>
          )}
          
          {/* Подтверждение удаления - модальное окно */}
          {showDeleteConfirm && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className="bg-white rounded-lg p-6 max-w-md mx-auto">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Подтверждение удаления</h3>
                <p className="text-gray-600 mb-6">
                  Вы действительно хотите удалить эту карточку? Это действие нельзя отменить.
                </p>
                <div className="flex justify-end space-x-3">
                  <button 
                    onClick={cancelDelete}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300"
                    disabled={saving}
                  >
                    Отмена
                  </button>
                  <button 
                    onClick={handleDelete}
                    className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
                    disabled={saving}
                  >
                    {saving ? 'Удаление...' : 'Удалить'}
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default EditCard; 